import General, XOF, numpy
import logging

# Basic configuration of logging
logging.basicConfig(
    level=logging.DEBUG,  # Set the log level
    format='%(asctime)s - %(levelname)s - %(message)s',  # Define log format
    handlers=[logging.StreamHandler()]  # Log to standard output (console)
)

n = 256
q=3329
k = 4
eta = 2 #eta1 and eta2 are the same value sete in the apporved parameter set
d1 = 11 #d^u is what is defined on the parameter set but easier to type as d1
d2 = 5 #d^v is what is defined on the parameter set but easier to type as d2


tempd = 12 #This is generated by "ML-KEM.KeyGen_internal" but function not implemented so just set to 12 for now.


def KeyGen(random):
    p, o = General.G(random + k.to_bytes(1, "big"))
    
    N = 0
    temp = []
    t = []
    logging.debug("KeyGen: Generating key")
    A = [[0 for _ in range(k)] for _ in range(k)] 
    for i in range(k): # re-generate matrix ùêÄ
        for j in range(k):
            A[i][j] = General.SampleNTT(p + j.to_bytes(1, "big") + i.to_bytes(1,"big") )
    logging.debug("Matrix A generated")
    s = [[0] * 256 for _ in range(k)]
    for i in range(k): #generate s
        s[i] = General.SamplePolyCBD(XOF.PRF(o, N, 1), 1)
        N += 1 
    logging.debug("s generated")
    e = [[0] * 256 for _ in range(k)]
    for i in range(k): #gemerate e1
        e[i] = General.SamplePolyCBD(XOF.PRF(o,N,2), 1)
        N += 1
    logging.debug("e generated")
    


    s1 = [[0] * 256 for _ in range(k)]
    for i in range(k):
        s1[i]= General.NTT(s[i])
    
    logging.debug("s1 generated")
    
    e1 = [[0] * 256 for _ in range(k)]
    for i in range(k):
        e1[i] = General.NTT(e[i])
    
    logging.debug("e1 generated")

    #t = numpy.dot(A,s) + e1
    t = numpy.einsum('ijk,jk->ik', A, s) + e
    ek = b""
    for i in range(k): 
        temp = General.ByteEncode(t[i],12)
        temp += p
        ek += temp


    dk = b""
    
    for i in range(k):
        dk += (General.ByteEncode(s1[i],12))
    return ek, dk


    



def Encrypt(ek , message, random):
    N = 0
    temp = []
    t = []
    for i in range(k):
        t += General.ByteDecode(ek[0 : (384*k)], 12)
        
    p = b""
    for x in range(k):
        p += ek[(384*k) : (384*k) + 32]

    A = [[0 for _ in range(k)] for _ in range(k)] 
    
    for i in range(k): # re-generate matrix ùêÄ
        for j in range(k):
            A[i][j] = General.SampleNTT(p + j.to_bytes(1, "big") + i.to_bytes(1,"big") )

    y = []
    for i in range(k): #generate ùê≤ 
        y.append(General.SamplePolyCBD(XOF.PRF(random, N, 1), 1))

        N += 1 

    e1 = []
    for i in range(k): #gemerate e1
        e1.append(General.SamplePolyCBD(XOF.PRF(random,N,2), 2))
        N += 1

    e2 = General.SamplePolyCBD(XOF.PRF(random,N,2), 2)
    
    y1 = [[0] * 256 for _ in range(k)]
    for i in range(k):
        y1[i]= General.NTT(y[i])
    u = General.NTTi((numpy.multiply(t,y1))+e1)
    u2 = XOF.Decompress(General.ByteDecode(message, 1))
    v = General.NTTi((numpy.multiply(t,y)) + e2 + u2)
    c1 = []
    for i in range(k):
        c1.append(General.ByteEncode(XOF.compress_d(u[k],d1),d1))
    c2 = []
    for i in range(k):
        c2.append(General.ByteEncode(XOF.compress_d(v[k],d1),d1))
    return c1,c2

    